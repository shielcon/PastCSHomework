#!/bin/bash

trap "rm -f *$$*; echo 'SIGINT received: Deleting all temp files then exiting'; exit 1" INT


dims(){


if [ "$2" ]
then
	echo "Dims can only be performed on one matrix" 1>&2
	exit 1
fi

if [ ! $1 ] 
then
	echo "No matrix provided" 1>&2
	exit 1
fi

if [ ! -r $1 ]
then
	echo "The file is unreadable" 1>&2
	exit 1
fi

rows=0
while read myLine
do
        rows=`expr $rows + 1`
done < $1
read line<$1
cols=0
for i in $line
do
        cols=`expr $cols + 1`
done
echo $rows $cols
}


dimsHelper(){

#Steps through each row, incrementing
#rows at each iteration. The result is
#$rows, which is the total number of rows
rows=0
while read myLine
do
        rows=`expr $rows + 1`
done < $1
read line<$1

#Only one line is required to calculate the
#number of columns. The loop iterates through
#each element in the line and increments
#$cols at each step
cols=0
for i in $line
do
        cols=`expr $cols + 1`
done
}

transpose(){

if [ ! $1 ]
then
        echo "No matrix provided" 1>&2
        exit 1
fi

if [ ! -r $1 ]
then
        echo "The file is unreadable" 1>&2
        exit 1
fi

if [ "$2" ]
then
        echo "Transpose can only be performed on one matrix" 1>&2
        exit 1
fi


dimsHelper $1
tmp="transposed$$"

for i in `seq 1 $cols`
do

	string=$(cut -f $i $1)
	echo $string | tr ' ' '\t'>>$tmp

done

cat $tmp
rm $tmp

}

mean(){

if [ ! $1 ]
then
        echo "No matrix provided" 1>&2
        exit 1
fi

if [ ! -r $1 ]
then
        echo "The file is unreadable" 1>&2
        exit 1
fi

if [ "$2" ]
then
        echo "Mean can only be performed on one matrix" 1>&2
        exit 1
fi


dimsHelper $1


lineMean=0
lineTotal=0

#This loop extracts each column and stores
#that column as a line in $line so that the
#numbers can easily be iterated
for i in `seq 1 $cols`
do
        line=$(cut -f $i $1)
        lineTotal=0

        #this loop generates the sum of each column
        for number in $line
        do
                lineTotal=$(expr $lineTotal + $number)
        done

        #uses the provided formula to round properly - divides the sum
        #of the columns by the total number of columns
        lineMean=$((($lineTotal + ($rows / 2) * ($(($lineTotal>0)) * 2 - 1)) / $rows))
        means="$means $lineMean"
done
echo $means | tr ' ' '\t'


}

add(){

if [[ ! $1 || ! $2 ]]
then
        echo "Add requires two matrices to be input" 1>&2
        exit 1
fi

if [[ ! -r $1 || ! -r $2 ]]
then
        echo "Add requires valid matrices to be input" 1>&2
        exit 1
fi

if [ "$3" ]
then
        echo "Add can only be performed on two matrices" 1>&2
        exit 1
fi


dimsHelper $1
m1rows=$rows
m1cols=$cols
added="added$$"
add1="add1$$"
add2="add2$$"
dimsHelper $2

if [ $m1rows -ne $rows ]
then
	echo "Cannot add: the input matrices have different dimensions" 1>&2
	exit 1
fi

if [ $m1cols -ne $cols ]
then
        echo "Cannot add: the input matrices have different dimensions" 1>&2
        exit 1
fi


while 
	read mat1 0<&3
	read mat2 0<&4
do
	echo $mat1 | tr ' ' '\t'>$add1
	echo $mat2 | tr ' ' '\t'>$add2
	line=""
	for i in `seq 1 $cols`
	do
		a=$(cut -f $i $add1)
		b=$(cut -f $i $add2)
		c=$(expr $a + $b)
		line="$line $c"
	done
	echo $line | tr ' ' '\t'>>$added
done 3<$1 4<$2
cat $added
rm -f $added

}

multiply(){

if [[ ! $1 || ! $2 ]]
then
        echo "Multiply requires two matrices to be input" 1>&2
        exit 1
fi

if [[ ! -r $1 || ! -r $2 ]]
then
        echo "Multiply requires valid matrices to be input" 1>&2
        exit 1
fi

if [ "$3" ]
then
        echo "Multiply can only be performed on two matrices" 1>&2
        exit 1
fi


dimsHelper $1
m1cols=$cols
m1rows=$rows
dimsHelper $2
m2cols=$cols
m2rows=$rows

if [ $m1cols -ne $m2rows ]
then
	echo "Can't multiply: the number of rows in matrix 1 must equal the number of columns in matrix 2" 1>&2
	exit 1
fi 

transposed="TMPtp$$"
transpose $2 > $transposed


rowColSum=0
string=""
finalMatrix="TMP$$"
thisRow="TMProw$$"
thisCol="TMPcol$$"
j=0
while read row
do
	j=$(expr $j + 1)
        line=""
	echo $row | tr ' ' '\t'>$thisRow
        while read column
        do
		echo $column | tr ' ' '\t'>$thisCol
		sum=0
		for i in `seq 1 $(expr $m2rows)`
		do
			a=$(cut -f $i $thisCol)
			b=$(cut -f $i $thisRow)
			product=$(expr $a \* $b)
			sum=$(expr $sum + $product)
		done
		line="$line $sum"
        done < $transposed
        echo $line | tr ' ' '\t'>>$finalMatrix
done < $1


cat $finalMatrix

}

if [[ $1 != "dims" && $1 != "mean" && $1 != "transpose" && $1 != "add" && $1 != "multiply" ]]
then
	echo "Not a valid function" 1>&2
	exit 1
fi

if [[ $1 == "dims" || $1 == "mean" || $1 == "transpose" ]]
then
	datafilepath="datafile$$"
	if [ "$#" = "1" ]
	then
    		cat > "$datafilepath"
	elif [ "$#" = "2" ]
	then
    		datafilepath=$2
	fi
	$1 $datafilepath
else

	$1 "${@:2}"

fi
rm -f *$$*
