Connor Shields
CS 261
Programming Assignment 2 part 2

1.

For the first 8 push operations, there will be 8 cost units used.

for the 9th push operation, 8 cost units will be used to allocate more memory and double the array, then another 1 unit will be used
to add the 9th element. Total now = 17.

For the subsequent 7 pushes, one cost unit will be used for each. Total now = 24.

For the next push, the capacity must double again, which costs 16 units. Total now = 40.

Finally, the last 16 push operations can be performed without any additional memory allocation. This means that we can
push the remaining 16 elements at the cost of 16 units. The final total is 56 cost units.
Big-O complexity for this push operation is then O(1)+

2.

For the first 8 pushes, 8 units of cost are used. Total = 8.

To add 2 more to the capacity, 10 cost units are used, plus one more to push the next element. Total = 19.

Adding one more only cost 1 cost unit, but it fills the array up again with 10 elements. Total = 20.

To add 2 more to the capacity, 12 cost units are used, plus one more to push the next element. Total = 33.

Adding one more only cost 1 cost unit, but it fills the array up again with 12 elements. Total = 34.

To add 2 more to the capacity, 14 cost units are used, plus one more to push the next element. Total = 59.

Adding one more only cost 1 cost unit, but it fills the array up again with 14 elements. Total = 60.

To add 2 more to the capacity, 16 cost units are used, plus one more to push the next element. Total = 77.

Adding one more only cost 1 cost unit, but it fills the array up again with 14 elements. Total = 78.

To add 2 more to the capacity, 18 cost units are used, plus one more to push the next element. Total = 97.

Adding one more only cost 1 cost unit, but it fills the array up again with 14 elements. Total = 98.

This follows a simple pattern. Let total cost = c, let n = next array capacity, and let current total = t. c = t + n.

from our last step, c = 97 + 20 + 1. c = 118 (this gets us to the 20th element)
then add one for the push without an allocate. Total = 119.

for 22nd element, c = 119 + 22 + 1; c = 132
+ 1 = 133

For 24th element, c = 133 + 24 + 1; c = 158
+ 1 = 159

for 26th element, c = 159 + 26 + 1; c = 186
+ 1 = 187

for 28th element, c = 187 + 28 + 1; c = 216
+ 1 = 217

for 30th element, c = 217 + 30 + 1; c = 248
+ 1 = 249

for 32nd element, c = 249 + 32 + 1; c = 282.

Total unit cost for this use of the push and memory allocation is 282. Since the allocation increases with every other moves, execution
time can be written as n/2, which in Big-O notation is simply O(n).


